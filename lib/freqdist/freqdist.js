// Generated by CoffeeScript 1.3.3
var FreqDist;

FreqDist = (function() {

  function FreqDist(init) {
    var item, w, _i, _j, _len, _len1;
    this._items = {};
    this._sorted = [];
    if (init != null) {
      if (Object.prototype.toString.call(init) === "[object Array]") {
        if (Object.prototype.toString.call(init[0]) === "[object Array]") {
          init = init.reduce(function(p, c) {
            return p.concat(c);
          }, []);
        }
        for (_i = 0, _len = init.length; _i < _len; _i++) {
          item = init[_i];
          if (Object.prototype.toString.call(item) === "[object String]" || Object.prototype.toString.call(item) === "[object Number]") {
            if (this._items[item]) {
              this._items[item]++;
            } else {
              this._items[item] = 1;
            }
          } else {
            console.log("neither string nor number in array");
            console.log("found: " + Object.prototype.toString.call(item));
            return false;
          }
        }
      } else if (Object.prototype.toString.call(init) === "[object String]") {
        init = init.toLowerCase();
        for (_j = 0, _len1 = init.length; _j < _len1; _j++) {
          w = init[_j];
          if (this._items[w]) {
            this._items[w]++;
          } else {
            this._items[w] = 1;
          }
        }
      } else {
        console.log("not iterable");
        return false;
      }
      this._sorted = this._sort();
    }
    this;

  }

  FreqDist.prototype._sort = function() {
    var k, v;
    return ((function() {
      var _ref, _results;
      _ref = this._items;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        _results.push({
          key: k,
          value: v
        });
      }
      return _results;
    }).call(this)).sort(function(a, b) {
      return b.value - a.value;
    });
  };

  FreqDist.prototype._iterate = function(key, start, end) {
    var item, _a;
    _a = (function() {
      var _i, _len, _ref, _results;
      _ref = this._sorted;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _results.push(item[key]);
      }
      return _results;
    }).call(this);
    if (end != null) {
      return _a.slice(start, end);
    } else if (start != null) {
      return _a.slice(start);
    } else {
      return _a;
    }
  };

  FreqDist.prototype.inc = function(item) {
    if (Object.prototype.toString.call(item) === "[object String]" || Object.prototype.toString.call(item) === "[object Number]") {
      if (this._items[item]) {
        this._items[item]++;
      } else {
        this._items[item] = 1;
      }
      this._sorted = this._sort();
      return this;
    } else {
      console.log("can only increment string or number");
      return false;
    }
  };

  FreqDist.prototype.items = function(start, end) {
    if (end != null) {
      return this._sorted.slice(start, end);
    } else if (start != null) {
      return this._sorted.slice(start);
    } else {
      return this._sorted;
    }
  };

  FreqDist.prototype.keys = function(start, end) {
    return this._iterate("key", start, end);
  };

  FreqDist.prototype.values = function(start, end) {
    return this._iterate("value", start, end);
  };

  FreqDist.prototype.freq = function(item) {
    if (this._items[item]) {
      return this._items[item];
    } else {
      return 0;
    }
  };

  return FreqDist;

})();

module.exports = FreqDist;
